{"file_contents":{"main.py":{"content":"from flask import Flask, render_template, send_file, redirect, url_for, flash, request\nfrom docx import Document\nimport os\nfrom datetime import datetime\nimport tempfile\nimport sys\nfrom io import StringIO\n\napp = Flask(__name__)\napp.secret_key = 'your-secret-key-here'\n\n# Configure to disable browser caching\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers[\"Expires\"] = \"0\"\n    return response\n\ndef execute_python_code_and_create_doc(python_code):\n    \"\"\"Execute user's Python code and return the file path of the generated document\"\"\"\n    try:\n        # Create static directory if it doesn't exist\n        if not os.path.exists('static'):\n            os.makedirs('static')\n        \n        # Create a controlled environment for executing the code\n        namespace = {\n            'Document': Document,\n            'datetime': datetime,\n            'os': os\n        }\n        \n        # Execute the user's Python code\n        exec(python_code, namespace)\n        \n        # Check if 'doc' variable exists in the namespace\n        if 'doc' not in namespace:\n            raise ValueError(\"Your script must create a variable named 'doc' that contains the Document object.\")\n        \n        doc = namespace['doc']\n        \n        # Verify it's a Document object by checking if it has the expected methods\n        if not hasattr(doc, 'save') or not hasattr(doc, 'add_heading'):\n            raise ValueError(\"The 'doc' variable must be a Document object from python-docx.\")\n        \n        # Save document to static folder so it can be served\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        filename = f\"Generated_Document_{timestamp}.docx\"\n        file_path = os.path.join('static', filename)\n        doc.save(file_path)\n        \n        return file_path\n    \n    except Exception as e:\n        raise Exception(f\"Error executing your Python code: {str(e)}\")\n\ndef get_default_code():\n    \"\"\"Return the default Python code for the Scope and Limitations document\"\"\"\n    return \"\"\"from docx import Document\n\n# Create a new Document\ndoc = Document()\n\n# Title\ndoc.add_heading('Scope and Limitations', level=1)\n\n# Scope Section\ndoc.add_heading('Scope', level=2)\ndoc.add_paragraph(\n    \"This study focuses on the design, development, and deployment of a Smart Coin-Operated Water Dispenser powered by IoT technology. \"\n    \"The scope of the project includes:\"\n)\ndoc.add_paragraph(\n    \"1. Automated Dispensing Mechanism – Development of a coin-based activation system that allows users to select between normal temperature water and chilled water, with accurate dispensing volume per coin inserted.\\\\n\"\n    \"2. IoT Integration – Implementation of a centralized admin dashboard that displays real-time data such as water level, chilled water temperature, and coin box capacity. The dashboard also provides push notifications for system alerts (low water, full coin box, or temperature malfunction).\\\\n\"\n    \"3. User Interface – Provision of a simple and intuitive interface (buttons and display screen) to guide users throughout the process of coin insertion, selection, and water dispensing.\\\\n\"\n    \"4. Safety and Maintenance Features – Real-time monitoring and alert system for operational reliability, including warnings for low water supply and a nearly full coin box, supported by sensors like ultrasonic sensors, thermistors, and load cells.\\\\n\"\n    \"5. Testing and Validation – System calibration for dispensing accuracy, reliability tests of components (ESP32, solenoid valves, pumps, sensors), and evaluation of performance based on user satisfaction, efficiency, and cost-effectiveness.\"\n)\n\n# Limitations Section\ndoc.add_heading('Limitations', level=2)\ndoc.add_paragraph(\n    \"Despite its capabilities, the study is bounded by the following limitations:\"\n)\ndoc.add_paragraph(\n    \"1. Coin-Based Payment Only – The system accepts physical coins as the only form of payment. Other payment modes (e.g., QR code, RFID, or mobile payment) are not included in this prototype.\\\\n\"\n    \"2. Single-Source Input – The machine is designed to operate with a single main water jug/reservoir at a time. It does not automatically refill from external pipelines or other water sources.\\\\n\"\n    \"3. Chilled Water Limitation – Cooling is limited to the use of a chilled storage container, monitored by a thermistor. Advanced cooling systems (e.g., compressor-based refrigeration) are not part of this study.\\\\n\"\n    \"4. Capacity Constraints – The dispensing limit is defined per coin transaction (e.g., up to ₱10 worth of water per dispense). Larger dispensing volumes or bulk transactions are outside the scope.\\\\n\"\n    \"5. Operational Range of Sensors – The accuracy of water level (ultrasonic sensor), coin box weight (load cell), and temperature (thermistor) may vary under real-world conditions such as vibration, uneven coin stacking, or fluctuating room temperature.\\\\n\"\n    \"6. Network Dependency – The IoT dashboard requires a stable internet connection for real-time monitoring. In areas with poor connectivity, remote access and notifications may be delayed or unavailable.\\\\n\"\n    \"7. Prototype Stage – The project is developed as a prototype for academic purposes. Long-term durability, large-scale deployment, and commercial-grade optimization (e.g., energy efficiency, tamper-proof design, water filtration integration) are not fully addressed in this study.\"\n)\"\"\"\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/generate', methods=['GET', 'POST'])\ndef generate_document():\n    if request.method == 'GET':\n        # Redirect GET requests to the main page\n        return redirect(url_for('index'))\n    \n    try:\n        python_code = request.form.get('python_code', '').strip()\n        \n        if not python_code:\n            flash('Please provide Python code to generate a document.', 'error')\n            return redirect(url_for('index'))\n        \n        file_path = execute_python_code_and_create_doc(python_code)\n        filename = os.path.basename(file_path)\n        flash(f'Document \"{filename}\" generated successfully!', 'success')\n        return redirect(url_for('index', download_file=filename))\n    except Exception as e:\n        flash(f'Error generating document: {str(e)}', 'error')\n        return redirect(url_for('index'))\n\n@app.route('/download/<filename>')\ndef download_file(filename):\n    try:\n        file_path = os.path.join('static', filename)\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=filename)\n        else:\n            flash('File not found!', 'error')\n            return redirect(url_for('index'))\n    except Exception as e:\n        flash(f'Error downloading file: {str(e)}', 'error')\n        return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":7024},"pyproject.toml":{"content":"[project]\nname = \"python-template\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name <you@example.com>\"]\nrequires-python = \">=3.11\"\ndependencies = [\n    \"docx>=0.2.4\",\n    \"flask>=3.1.2\",\n    \"python-docx>=1.2.0\",\n]\n","size_bytes":223},"README.md":{"content":"# Personal Document Generator\n\n## Overview\n\nA beautiful Flask-based web application that allows you to create custom Microsoft Word documents by executing your own Python scripts. This personal document generator features a modern neumorphism design with an uplifting animated gradient background, providing an elegant interface for programmatic document creation using the python-docx library.\n\n## Features\n\n- **Custom Script Execution**: Paste any Python script that uses python-docx to create documents\n- **Beautiful Neumorphism UI**: Modern soft-shadow design elements with tactile feel\n- **Animated Gradient Background**: Uplifting, colorful moving gradients for positive user experience\n- **Instant Document Generation**: Execute your scripts and download Word documents immediately\n- **Flexible Document Creation**: Support for any document structure (headings, paragraphs, tables, styles)\n- **Clean Interface**: Simple text area for code input with helpful examples and validation\n\n## How to Use\n\n1. **Open the web application** in your browser\n2. **Paste your Python script** in the text area that creates a Word document\n3. **Ensure your script** creates a variable named `doc` containing a Document object\n4. **Click \"Generate Document\"** to execute your script\n5. **Download the generated file** using the provided download link\n\n### Example Script\n\n```python\nfrom docx import Document\n\n# Create a new Document\ndoc = Document()\ndoc.add_heading('My Custom Document', level=1)\ndoc.add_paragraph('This is a custom paragraph created from my script.')\ndoc.add_heading('Section 1', level=2)\ndoc.add_paragraph('Content for section 1.')\n```\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: Flask web framework with dynamic code execution\n- **Document Engine**: python-docx library for Microsoft Word document creation\n- **Code Execution**: Controlled namespace execution of user-provided Python scripts\n- **File Management**: Timestamp-based file naming with static directory serving\n- **Security**: Sandboxed execution environment with limited namespace access\n\n### Frontend Architecture\n- **Design Style**: Neumorphism with soft shadows and modern aesthetics\n- **Background**: Animated gradient with smooth color transitions\n- **Typography**: Inter font family with clean, readable styling\n- **User Interface**: Single-page form-based interaction with real-time feedback\n- **Responsive Design**: Mobile-friendly layout with flexible containers\n\n### Document Generation Workflow\n1. **User Input**: Python script submission through web form\n2. **Code Validation**: Verification of required `doc` variable and Document object\n3. **Script Execution**: Controlled execution in limited namespace environment\n4. **File Creation**: Document generation with unique timestamp-based naming\n5. **Download Delivery**: Secure file serving through Flask's send_file mechanism\n\n## External Dependencies\n\n### Python Libraries\n- **Flask**: Web framework for HTTP handling and template rendering\n- **python-docx**: Document creation and manipulation library\n- **datetime**: Built-in module for timestamp generation\n- **os**: Built-in module for file system operations\n\n### Frontend Technologies\n- **Vanilla CSS**: Custom neumorphism styling without external frameworks\n- **Inter Font**: Modern typography with system font fallbacks\n- **CSS Animations**: Smooth gradient transitions and interactive button effects\n- **HTML5**: Semantic markup with accessibility considerations\n\n### Runtime Requirements\n- **Python 3.x**: Required interpreter for Flask and python-docx\n- **Modern Web Browser**: HTML5 and CSS3 support required\n- **File System Access**: Local directory creation and write permissions\n\n## Security Considerations\n\n- **Controlled Execution**: Limited namespace for Python script execution\n- **Input Validation**: Verification of Document object creation\n- **File Isolation**: Generated documents stored in secure static directory\n- **Cache Prevention**: No-cache headers to prevent sensitive content caching\n- **Session Management**: Flask session security with configured secret key\n\n## Development Setup\n\n1. Install dependencies: `Flask` and `python-docx`\n2. Run the application: `python main.py`\n3. Access the interface at `http://localhost:5000`\n4. Start creating custom documents with your Python scripts!","size_bytes":4327},"replit.md":{"content":"# Document Generator\n\n## Overview\n\nA Flask-based web application that generates Microsoft Word documents programmatically. The system allows users to execute Python code that creates documents using the python-docx library, with automatic file generation and download capabilities. Designed primarily for academic research document creation with a focus on simplicity and user-friendly document generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: Flask web framework chosen for its simplicity and rapid development capabilities\n- **Document Generation Engine**: python-docx library for programmatic Word document creation, allowing full control over document structure and formatting\n- **Code Execution System**: Controlled namespace execution environment that safely runs user-provided Python code while maintaining security boundaries\n- **File Management**: Temporary document storage in static directory with timestamp-based naming to prevent conflicts\n- **Session Management**: Flask's built-in session handling with secret key configuration for user state management\n\n### Frontend Architecture\n- **Rendering Strategy**: Server-side rendered HTML using Jinja2 templating engine\n- **Styling Approach**: Embedded CSS with neumorphism design principles, featuring gradient animations and shadow effects\n- **User Interface Pattern**: Single-page application with form-based interaction for code input and document generation\n- **Responsive Design**: Mobile-first approach with flexible container layouts\n\n### Security and File Handling\n- **Code Execution Security**: Controlled namespace execution with limited available modules and functions\n- **File Serving**: Direct Flask file serving with automatic cleanup and secure path handling\n- **Caching Strategy**: Aggressive no-cache headers implementation to prevent browser caching of generated documents\n- **Session Security**: Secret key configuration for Flask session encryption\n\n### Document Generation Workflow\n- **Input Processing**: User-provided Python code execution in sandboxed environment\n- **Document Validation**: Verification that executed code produces valid Document objects\n- **File Creation**: Timestamp-based file naming and storage in accessible static directory\n- **Download Mechanism**: Automatic file serving through Flask's send_file functionality\n\n## External Dependencies\n\n### Core Python Libraries\n- **Flask**: Web application framework for HTTP request handling and response generation\n- **python-docx**: Document creation and manipulation library for Microsoft Word format\n- **datetime**: Built-in module for timestamp generation and date handling\n- **tempfile**: File system utilities for temporary file management\n- **os**: Operating system interface for directory and file operations\n\n### Frontend Technologies\n- **Vanilla CSS**: Custom styling without external frameworks, implementing neumorphism design patterns\n- **Inter Font Family**: Modern typography with system font fallbacks\n- **CSS Animations**: Gradient animations and hover effects for enhanced user experience\n- **HTML5**: Semantic markup with accessibility considerations\n\n### Runtime Environment\n- **Python 3.x**: Required interpreter version for Flask and python-docx compatibility\n- **Web Browser**: Any modern browser supporting HTML5 and CSS3 features\n- **File System Access**: Local directory creation and file writing permissions required","size_bytes":3500}},"version":1}